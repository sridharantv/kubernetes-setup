openssl req \
-x509 \
-newkey rsa:2048 \
-sha256 \
-nodes \
-keyout /etc/pki/tls/kubernetes/k8s/ca/private/k8s-ca-key.pem \
-out /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \
-days 3650 \
-subj '/CN=Kubernetes Root CA'

=====

mkdir -p \
/etc/pki/tls/kubernetes/k8s/ca/private \
/etc/pki/tls/kubernetes/k8s/apiserver/server/private \
/etc/pki/tls/kubernetes/k8s/apiserver/client/private \
/etc/pki/tls/kubernetes/k8s/controller-manager/server/private \
/etc/pki/tls/kubernetes/k8s/controller-manager/client/private \
/etc/pki/tls/kubernetes/k8s/scheduler/server/private \
/etc/pki/tls/kubernetes/k8s/scheduler/client/private \
/etc/pki/tls/kubernetes/k8s/admin/client/private \
/etc/pki/tls/kubernetes/k8s/sa

=====

openssl genrsa -out /etc/pki/tls/kubernetes/k8s/sa/sa-key.pem 2048
openssl rsa -in /etc/pki/tls/kubernetes/k8s/sa/sa-key.pem -outform PEM -pubout -out /etc/pki/tls/kubernetes/k8s/sa/sa-pub.pem

======

openssl req \
-newkey rsa:2048 \
-sha256 \
-nodes \
-days 365 \
-reqexts SAN \
-keyout /etc/pki/tls/kubernetes/k8s/apiserver/server/private/apiserver-server-key.pem \
-out /etc/pki/tls/kubernetes/k8s/apiserver/server/apiserver-server-csr.pem \
-subj "/CN=kubernetes" \
-config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:kubernetes,DNS:kubernetes.default,DNS:kubernetes.default.svc,DNS:kubernetes.default.svc.cluster,DNS:kubernetes.default.svc.cluster.local,IP:192.168.101.121,IP:192.168.101.122,IP:192.168.101.123,IP:192.168.101.124"))

openssl ca \
-keyfile /etc/pki/tls/kubernetes/k8s/ca/private/k8s-ca-key.pem \
-cert /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \
-days 365 \
-extensions SERVER_CLIENT_CERT \
-policy policy_anything \
-in /etc/pki/tls/kubernetes/k8s/apiserver/server/apiserver-server-csr.pem \
-out /etc/pki/tls/kubernetes/k8s/apiserver/server/apiserver-server.pem

=====

openssl req \
-newkey rsa:2048 \
-sha256 \
-nodes \
-days 365 \
-keyout /etc/pki/tls/kubernetes/k8s/apiserver/client/private/apiserver-etcd-client-key.pem \
-out /etc/pki/tls/kubernetes/k8s/apiserver/client/apiserver-etcd-client-csr.pem \
-subj "/CN=apiserver-etcd client/O=system:masters"

openssl ca \
-keyfile /etc/pki/tls/kubernetes/etcd/ca/private/etcd-ca-key.pem \
-cert /etc/pki/tls/kubernetes/etcd/ca/etcd-ca.pem \
-days 365 \
-extensions CLIENT_CERT \
-policy policy_anything \
-in /etc/pki/tls/kubernetes/k8s/apiserver/client/apiserver-etcd-client-csr.pem \
-out /etc/pki/tls/kubernetes/k8s/apiserver/client/apiserver-etcd-client.pem

=====

openssl req \
-newkey rsa:2048 \
-sha256 \
-nodes \
-days 365 \
-keyout /etc/pki/tls/kubernetes/k8s/apiserver/client/private/apiserver-kubelet-client-key.pem \
-out /etc/pki/tls/kubernetes/k8s/apiserver/client/apiserver-kubelet-client-csr.pem \
-subj "/CN=apiserver-kubelet client/O=system:masters"

openssl ca \
-keyfile /etc/pki/tls/kubernetes/k8s/ca/private/k8s-ca-key.pem \
-cert /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \
-days 365 \
-extensions CLIENT_CERT \
-policy policy_anything \
-in /etc/pki/tls/kubernetes/k8s/apiserver/client/apiserver-kubelet-client-csr.pem \
-out /etc/pki/tls/kubernetes/k8s/apiserver/client/apiserver-kubelet-client.pem

======

openssl req \
-newkey rsa:2048 \
-sha256 \
-nodes \
-days 365 \
-keyout /etc/pki/tls/kubernetes/k8s/admin/client/private/admin-client-key.pem \
-out /etc/pki/tls/kubernetes/k8s/admin/client/admin-client-csr.pem \
-subj "/CN=kubernetes-admin/O=system:masters"

openssl ca \
-keyfile /etc/pki/tls/kubernetes/k8s/ca/private/k8s-ca-key.pem \
-cert /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \
-days 365 \
-extensions CLIENT_CERT \
-policy policy_anything \
-in /etc/pki/tls/kubernetes/k8s/admin/client/admin-client-csr.pem \
-out /etc/pki/tls/kubernetes/k8s/admin/client/admin-client.pem


=====

openssl req \
-newkey rsa:2048 \
-sha256 \
-nodes \
-days 365 \
-keyout /etc/pki/tls/kubernetes/k8s/controller-manager/client/private/controller-manager-apiserver-client-key.pem \
-out /etc/pki/tls/kubernetes/k8s/controller-manager/client/controller-manager-apiserver-client-csr.pem \
-subj "/CN=system:kube-controller-manager"

openssl ca \
-keyfile /etc/pki/tls/kubernetes/k8s/ca/private/k8s-ca-key.pem \
-cert /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \
-days 365 \
-extensions CLIENT_CERT \
-policy policy_anything \
-in /etc/pki/tls/kubernetes/k8s/controller-manager/client/controller-manager-apiserver-client-csr.pem \
-out /etc/pki/tls/kubernetes/k8s/controller-manager/client/controller-manager-apiserver-client.pem

=====

openssl req \
-newkey rsa:2048 \
-sha256 \
-nodes \
-days 365 \
-reqexts SAN \
-config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:controller-manager,IP:192.168.101.121,IP:192.168.101.122,IP:192.168.101.123")) \
-keyout /etc/pki/tls/kubernetes/k8s/controller-manager/server/private/controller-manager-server-key.pem \
-out /etc/pki/tls/kubernetes/k8s/controller-manager/server/controller-manager-server-csr.pem \
-subj "/CN=controller-manager"

openssl ca \
-keyfile /etc/pki/tls/kubernetes/k8s/ca/private/k8s-ca-key.pem \
-cert /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \
-days 365 \
-extensions SERVER_CLIENT_CERT \
-policy policy_anything \
-in /etc/pki/tls/kubernetes/k8s/controller-manager/server/controller-manager-server-csr.pem \
-out /etc/pki/tls/kubernetes/k8s/controller-manager/server/controller-manager-server.pem

===========

openssl req \
-newkey rsa:2048 \
-sha256 \
-nodes \
-days 365 \
-keyout /etc/pki/tls/kubernetes/k8s/scheduler/client/private/scheduler-apiserver-client-key.pem \
-out /etc/pki/tls/kubernetes/k8s/scheduler/client/scheduler-apiserver-client-csr.pem \
-subj "/CN=system:kube-scheduler"

openssl ca \
-keyfile /etc/pki/tls/kubernetes/k8s/ca/private/k8s-ca-key.pem \
-cert /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \
-days 365 \
-extensions CLIENT_CERT \
-policy policy_anything \
-in /etc/pki/tls/kubernetes/k8s/scheduler/client/scheduler-apiserver-client-csr.pem \
-out /etc/pki/tls/kubernetes/k8s/scheduler/client/scheduler-apiserver-client.pem

======

openssl req \
-newkey rsa:2048 \
-sha256 \
-nodes \
-days 365 \
-reqexts SAN \
-config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:scheduler,IP:192.168.101.121,IP:192.168.101.122,IP:192.168.101.123")) \
-keyout /etc/pki/tls/kubernetes/k8s/scheduler/server/private/scheduler-server-key.pem \
-out /etc/pki/tls/kubernetes/k8s/scheduler/server/scheduler-server-csr.pem \
-subj "/CN=scheduler"

openssl ca \
-keyfile /etc/pki/tls/kubernetes/k8s/ca/private/k8s-ca-key.pem \
-cert /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \
-days 365 \
-extensions SERVER_CLIENT_CERT \
-policy policy_anything \
-in /etc/pki/tls/kubernetes/k8s/scheduler/server/scheduler-server-csr.pem \
-out /etc/pki/tls/kubernetes/k8s/scheduler/server/scheduler-server.pem

#########################################

scp -r osboxes@192.168.101.118:/etc/pki/tls/kubernetes/k8s/* /etc/pki/tls/kubernetes/k8s/

###########################################
cat << EOF  > /usr/lib/systemd/system/kube-apiserver.service
[Unit]
Description=KUBE-APISERVER 
After=network.target

[Service]
User=osboxes
Restart=on-failure
RestartSec=5s
ExecStart=/usr/bin/kube-apiserver \\
  --advertise-address=`hostname -i` \\
  --etcd-cafile=/etc/pki/tls/kubernetes/etcd/ca/etcd-ca.pem \\
  --etcd-certfile=/etc/pki/tls/kubernetes/k8s/apiserver/client/apiserver-etcd-client.pem \\
  --etcd-keyfile=/etc/pki/tls/kubernetes/k8s/apiserver/client/private/apiserver-etcd-client-key.pem \\
  --etcd-servers=https://192.168.101.118:2379,https://192.168.101.119:2379,https://192.168.101.120:2379 \\
  --bind-address=`hostname -i` \\
  --secure-port=6443 \\
  --tls-cert-file=/etc/pki/tls/kubernetes/k8s/apiserver/server/apiserver-server.pem \\
  --tls-private-key-file=/etc/pki/tls/kubernetes/k8s/apiserver/server/private/apiserver-server-key.pem \\
  --enable-bootstrap-token-auth \\
  --client-ca-file=/etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \\
  --allow-privileged \\
  --apiserver-count=3 \\
  --kubelet-certificate-authority=/etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem \\
  --kubelet-client-certificate=/etc/pki/tls/kubernetes/k8s/apiserver/client/apiserver-kubelet-client.pem \\
  --kubelet-client-key=/etc/pki/tls/kubernetes/k8s/apiserver/client/private/apiserver-kubelet-client-key.pem \\
  --kubelet-https \\
  --service-cluster-ip-range=10.96.0.0/16 \\
  --service-account-key-file=/etc/pki/tls/kubernetes/k8s/sa/sa-pub.pem \\
  --authorization-mode=Node,RBAC \\
  --enable-bootstrap-token-auth
Type=notify

[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload

systemctl enable kube-apiserver
systemctl stop kube-apiserver
systemctl start kube-apiserver
systemctl status kube-apiserver


############################
haproxy
=======
global
   user haproxy
   group haproxy
   daemon
defaults
   log  global
   mode http
   option       httplog
   option       dontlognull
       timeout connect 5000
       timeout client  50000
       timeout server  50000
frontend k8s-api
   bind 0.0.0.0:443
   mode tcp
   option tcplog
   default_backend k8s-api
backend k8s-api
   mode tcp
   option tcplog
   option tcp-check
   balance roundrobin
   default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100
       server apiserver1 192.168.101.121:6443 check
       server apiserver2 192.168.101.122:6443 check
       server apiserver3 192.168.101.123:6443 check



###########

mkdir -p /etc/kubernetes/manifests

KUBECONFIG=~/.kube/config kubectl config set-cluster default-cluster --server=https://192.168.101.124:443 --certificate-authority /etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem --embed-certs

KUBECONFIG=~/.kube/config kubectl config set-credentials default-admin --client-key /etc/pki/tls/kubernetes/k8s/admin/client/private/admin-client-key.pem --client-certificate /etc/pki/tls/kubernetes/k8s/admin/client/admin-client.pem --embed-certs

KUBECONFIG=~/.kube/config kubectl config set-context default-system --cluster default-cluster --user default-admin

KUBECONFIG=~/.kube/config kubectl config use-context default-system

chmod 644 ~/.kube/config

=======

cat << EOF > /tmp/bootstrap-token-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  # Name MUST be of form "bootstrap-token-<token id>"
  name: bootstrap-token-07401b
  namespace: kube-system

# Type MUST be 'bootstrap.kubernetes.io/token'
type: bootstrap.kubernetes.io/token
stringData:
  # Human readable description. Optional.
  description: "The default bootstrap token generated by 'kubeadm init'."

  # Token ID and secret. Required.
  token-id: 07401b
  token-secret: f395accd246ae52d

  # Allowed usages.
  usage-bootstrap-authentication: "true"
  usage-bootstrap-signing: "true"

  # Extra groups to authenticate the token as. Must start with "system:bootstrappers:"
  auth-extra-groups: system:bootstrappers:worker,system:bootstrappers:ingress
EOF








