setenforce 0
cp /etc/selinux/config /etc/selinux/config.orig

cat << EOF > /etc/selinux/config
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#     enforcing - SELinux security policy is enforced.
#     permissive - SELinux prints warnings instead of enforcing.
#     disabled - No SELinux policy is loaded.
SELINUX=disabled
# SELINUXTYPE= can take one of three values:
#     targeted - Targeted processes are protected,
#     minimum - Modification of targeted policy. Only selected processes are protected.
#     mls - Multi Level Security protection.
SELINUXTYPE=targeted
EOF

systemctl stop firewalld
systemctl disable firewalld

swapoff -a

mkdir -p /etc/kubernetes/manifests
mkdir -p /etc/kubelet
mkdir -p /etc/kubelet/certs
chown osboxes:osboxes /etc/kubernetes /etc/kubelet /etc/kubelet/certs

ca_ip=192.168.43.148
scp osboxes@${ca_ip}:/etc/pki/tls/kubernetes/k8s/ca/k8s-ca.pem /etc/kubernetes/ca.pem

chown osboxes:osboxes /etc/kubernetes/ca.pem

curl -o install_docker.sh https://get.docker.com
sh install_docker.sh
sudo usermod -aG docker osboxes

mkdir /etc/docker
# Setup daemon.
cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF

mkdir -p /etc/systemd/system/docker.service.d

# Restart Docker
systemctl daemon-reload
systemctl enable docker
systemctl restart docker
systemctl status docker

ip4=192.168.43.57

cat << EOF > /etc/kubelet/bootstrap-kubeconfig
apiVersion: v1
kind: Config
clusters:
- cluster:
    certificate-authority: /etc/kubernetes/ca.pem
    server: https://${ip4}
  name: bootstrap
contexts:
- context:
    cluster: bootstrap
    user: kubelet-bootstrap
  name: bootstrap
current-context: bootstrap
preferences: {}
users:
- name: kubelet-bootstrap
  user:
    token: 07401b.f395accd246ae52d
EOF

cd /home/osboxes
tar -zxvf kubernetes-node-linux-amd64.tar.gz
mv /home/osboxes/kubernetes/node/bin/kubelet /usr/bin

mkdir -p /opt/cni/bin
mkdir -p /etc/cni/net.d
mv /home/osboxes/cni-plugins-linux-amd64-v0.8.2.tgz /opt/cni/bin
cd /opt/cni/bin
tar -zxvf cni-plugins-linux-amd64-v0.8.2.tgz



cat << EOF  > /usr/lib/systemd/system/kubelet.service
[Unit]
Description=KUBELET

[Service]
Restart=on-failure
ExecStart=/usr/bin/kubelet \\
--bootstrap-kubeconfig=/etc/kubelet/bootstrap-kubeconfig \\
--cgroup-driver=systemd \\
--cert-dir=/etc/kubelet/certs \\
--kubeconfig=/etc/kubelet/kubelet-kubeconfig.yaml \\
--pod-manifest-path=/etc/kubernetes/manifests \\
--register-node \\
--rotate-certificates \\
--rotate-server-certificates \\
--network-plugin=cni \\
--cni-conf-dir=/etc/cni/net.d \\
--cni-bin-dir=/opt/cni/bin \\
--cluster-dns=10.96.0.10


[Install]
WantedBy=multi-user.target
EOF

systemctl daemon-reload

systemctl enable kubelet
systemctl stop kubelet
systemctl start kubelet
systemctl status kubelet

###########################


kubectl label node k8s-master01 node-role.kubernetes.io/master=true
kubectl label node k8s-master02 node-role.kubernetes.io/master=true
kubectl label node k8s-master03 node-role.kubernetes.io/master=true

kubectl taint nodes k8s-master01 node-role.kubernetes.io/master=true:NoSchedule
kubectl taint nodes k8s-master02 node-role.kubernetes.io/master=true:NoSchedule
kubectl taint nodes k8s-master03 node-role.kubernetes.io/master=true:NoSchedule

kubectl label node k8s-node01 node-role.kubernetes.io/worker=true
kubectl label node k8s-node02 node-role.kubernetes.io/worker=true
kubectl label node k8s-node03 node-role.kubernetes.io/worker=true


